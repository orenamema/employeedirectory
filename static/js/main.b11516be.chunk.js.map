{"version":3,"sources":["utils/Api.js","components/DatatablePage.js","App.js","serviceWorker.js","index.js"],"names":["fetch","method","then","res","json","DatatablePage","state","columns","label","field","sort","width","rows","name","email","image","phone","DOB","componentDidMount","Api","results","forEach","item","push","first","last","src","picture","thumbnail","className","class","alt","dob","date","substring","setState","catch","err","console","error","striped","bordered","hover","data","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAEc,EACA,WACN,OAAOA,MAAM,+CAAgD,CACzDC,OAAQ,QAEPC,MAAK,SAAAC,GAAQ,OAAOA,EAAIC,W,QCoEtBC,E,2MArEbC,MAAQ,CACNC,QAAS,CACP,CACEC,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,MACPC,MAAO,MACPC,KAAM,MACNC,MAAO,MAGXC,KAAM,CAAC,CAACC,KAAM,OAAQC,MAAO,2BAA4BC,MAAO,mDAAoDC,MAAO,iBAAkBC,IAAK,4BAC3I,CAACJ,KAAM,OAAQC,MAAO,4BAA6BC,MAAO,iDAAkDC,MAAO,iBAAkBC,IAAK,8B,EAInJC,kBAAmB,WAEjBC,IAAejB,MAAK,SAAAE,GAChB,IAAIQ,EAAO,GACXR,EAAKgB,QAAQC,SAAQ,SAAAC,GAAI,OAAIV,EAAKW,KAAK,CACrCV,KAAK,GAAD,OAAKS,EAAKT,KAAKW,MAAf,YAAwBF,EAAKT,KAAKY,MACtCX,MAAOQ,EAAKR,MACZC,MAAO,CAAC,yBAAKW,IAAKJ,EAAKK,QAAQC,UAAWC,UAAU,YAAYC,MAAM,iBAAiBC,IAAI,MAC3Ff,MAAOM,EAAKN,MACZC,IAAKK,EAAKU,IAAIC,KAAKC,UAAU,EAAG,SAElC,EAAKC,SAAS,CAAEvB,YAEjBwB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,O,wEAK9B,OACE,kBAAC,IAAD,CACIG,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,KAAM,CAAEpC,QAASqC,KAAKtC,MAAMC,QAASK,KAAMgC,KAAKtC,MAAMM,Y,GA/DpCiC,IAAMC,WCcnBC,MAdf,WACE,OACE,yBAAKlB,UAAU,OAEnB,yBAAKA,UAAU,UACb,mDACA,mHAEM,kBAAC,EAAD,QCAYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,MAAK,SAAA0D,GACjCA,EAAaC,kB","file":"static/js/main.b11516be.chunk.js","sourcesContent":["// import axios from \"axios\"\n\nexport default{\n    getusers: function(){\n        return fetch(\"https://randomuser.me/api/?results=50&nat=us\", {\n            method: \"GET\",\n          })\n            .then(res => {return res.json();})\n    }\n\n}\n","import React from 'react';\nimport Api from \"../utils/Api.js\";\nimport { MDBDataTable} from 'mdbreact';\n\nclass DatatablePage extends React.Component {\n\n  state = {\n    columns: [\n      {\n        label: 'Image',\n        field: 'image',\n        sort: 'asc',\n        width: 150\n      },\n      {\n        label: 'Name',\n        field: 'name',\n        sort: 'asc',\n        width: 270\n      },\n      {\n        label: 'Phone',\n        field: 'phone',\n        sort: 'asc',\n        width: 200\n      },\n      {\n        label: 'Email',\n        field: 'email',\n        sort: 'asc',\n        width: 100\n      },\n      {\n        label: 'DOB',\n        field: 'DOB',\n        sort: 'asc',\n        width: 150\n      }\n    ],\n    rows: [{name: \"Krin\", email: \"krin.steward@example.com\", image: \"https://randomuser.me/api/portraits/women/34.jpg\", phone: \"(877)-580-1684\", DOB: \"1964-07-02T01:13:47.389Z\"}\n          ,{name: \"Kent\", email: \"kent.ferguson@example.com\", image: \"https://randomuser.me/api/portraits/men/89.jpg\", phone: \"(805)-018-4976\", DOB: \"1992-10-25T11:12:19.284Z\"}]\n    \n  };\n\n  componentDidMount =()=>{\n\n    Api.getusers().then(json => {\n        let rows = [];\n        json.results.forEach(item => rows.push({\n          name: `${item.name.first} ${item.name.last}`,\n          email: item.email,\n          image: [<img src={item.picture.thumbnail} className=\"img-fluid\" class=\"rounded-circle\" alt=\"\"/>], //\n          phone: item.phone,\n          DOB: item.dob.date.substring(0, 10),\n        }));\n        this.setState({ rows });\n      })\n      .catch(err => console.error(err));\n    \n  }\n\n  render() {\n    return (\n      <MDBDataTable\n          striped\n          bordered\n          hover\n          data={{ columns: this.state.columns, rows: this.state.rows }}\n        />\n    );\n\n  }\n  \n};\n\nexport default DatatablePage;","import React from 'react';\nimport './App.css';\nimport DatatablePage from \"./components/DatatablePage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n<div className=\"Header\">\n  <h1>Employee Directory </h1>\n  <h8>Click on carrots to filter by heading or use the search box to narrow your results</h8>\n</div>\n        <DatatablePage/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// https://react-bootstrap.github.io/getting-started/introduction/\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}